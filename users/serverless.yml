service: usersProfilesMicro

plugins:
  localPath: "../node-modules"
  modules:
    - serverless-plugin-ifelse
    - serverless-prune-plugin
    - serverless-dotenv-plugin
    - serverless-offline # This should be the last in the list
custom:
  dotenv:
    basePath: ../
  prune:
    automatic: true
    number: 3

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ${env:REGION,'eu-central-1'}
  stackName: ${self:service.name}Stack
  apiName: ${self:service.name}Api
  environment:
  endpointType: regional 
  iamRoleStatements: 
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:UpdateItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:DeleteItem"
      Resource:
        - arn:aws:dynamodb:${env:REGION,'eu-central-1'}:${env:ACCOUNT_ID}:table/users
# you can add packaging information here
package:
  excludeDevDependencies: true
  include:
  #   - include-me.js
  exclude:

functions:
  getUserProfile:
    handler: src/getUserProfile.handler
    name: userProfileResponseManager
    timeout: 2
    memorySize: 128
    environment:
      usersTableName: users
    events:
      - http:
          path: v1/${self:service.name}
          integration: lambda
          method: get
          cors: true
  userProfileUpdateBudget:
    handler: src/userProfileUpdateBudget.handler
    name: userProfileUpdateBudget
    timeout: 2
    memorySize: 128
    environment:
      usersTableName: users

# you can add CloudFormation resource templates here
resources:
 Resources:
  UsersTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TableName: users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
